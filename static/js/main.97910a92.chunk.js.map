{"version":3,"sources":["components/Filter.js","components/ContactForm.js","components/ContactList.js","components/Alert.js","components/Loading.js","contacts-selectors.js","actions.js","reduxOperations.js","App.js","reducers/contactReducer.js","reducers/filterReducer.js","reducers/mountedReducer.js","reducers/alertShownReducer.js","reducers/alertMessageReducer.js","reducers/index.js","index.js"],"names":["Filter","props","className","id","onChange","filterChange","value","filterVal","ContactForm","state","name","number","handleChange","e","setState","target","handleSubmit","preventDefault","formSubmit","onSubmit","this","type","React","Component","ContactListItem","contactId","remove","onClick","ContactList","useEffect","localStorage","setItem","JSON","stringify","contacts","TransitionGroup","component","filter","map","contact","CSSTransition","key","timeout","classNames","toLowerCase","includes","Alert","isShown","info","in","style","display","Loader","isMounted","isAlertShown","alertMessage","isLoading","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","payload","toggleMounted","toggleAlertVisibility","toggleAlertMessage","dispatch","actions","axios","get","then","response","data","catch","error","post","delete","App","trim","find","handleAlert","onFormSubmit","message","handleAlertChange","handleAlertVisibility","setTimeout","loadContacts","mountOnEnter","length","handleFilter","removeContact","connect","selectors","operations","contactReducer","createReducer","action","el","loading","filterReducer","mountedReducer","alertShownReducer","alertMessageReducer","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97910a92.chunk.js","sourcesContent":["import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nconst Filter = (props) => {\n  return (\n    <div className=\"filter\">\n      <p className=\"filter__title\">Find contacts by name</p>\n      <input\n        className=\"filter__input\"\n        id=\"filter\"\n        onChange={props.filterChange}\n        value={props.filterVal}\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filterChange: PropTypes.func,\n  filterVal: PropTypes.string,\n};\n\nexport default Filter;\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nclass ContactForm extends React.Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.formSubmit(this.state);\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"form__name\">\n          Name\n          <input\n            className=\"form__name--input\"\n            id=\"name\"\n            onChange={this.handleChange}\n            type=\"text\"\n            value={this.state.name}\n          />\n        </label>\n        <label className=\"form__number\">\n          Number\n          <input\n            className=\"form__number--input\"\n            id=\"number\"\n            onChange={this.handleChange}\n            type=\"text\"\n            value={this.state.number}\n          />\n        </label>\n        <button className=\"form__submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  formSubmit: PropTypes.func,\n};\n","import React, { useEffect } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport PropTypes from \"prop-types\";\n\nconst LS_KEY = \"react-hw-3\";\n\nconst ContactList = (props) => {\n  useEffect(() => {\n    localStorage.setItem(LS_KEY, JSON.stringify(props.contacts));\n  }, [props.contacts]);\n\n  return (\n    <TransitionGroup component=\"ul\" className=\"contact-list\">\n      {props.filter === \"\"\n        ? props.contacts.map((contact) => (\n            <CSSTransition\n              key={contact.id}\n              timeout={250}\n              classNames=\"contact-list__item\"\n            >\n              <ContactListItem\n                contactId={contact.id}\n                name={contact.name}\n                number={contact.number}\n                remove={props.remove}\n              />\n            </CSSTransition>\n          ))\n        : props.contacts\n            .filter((contact) =>\n              contact.name.toLowerCase().includes(props.filter.toLowerCase())\n            )\n            .map((contact) => (\n              <CSSTransition\n                key={contact.id}\n                timeout={250}\n                classNames=\"contact-list__item\"\n              >\n                <ContactListItem\n                  key={contact.id}\n                  contactId={contact.id}\n                  name={contact.name}\n                  number={contact.number}\n                  remove={props.remove}\n                />\n              </CSSTransition>\n            ))}\n    </TransitionGroup>\n  );\n};\n\nconst ContactListItem = ({ contactId, name, number, remove }) => (\n  <li className=\"contact-list__item\">\n    <div className=\"contact-list__item--cont\">\n      <span className=\"contact-list__item--span\">{name}</span>\n      <span className=\"contact-list__item--span\">{number}</span>\n    </div>\n\n    <button\n      className=\"contact-list__remove\"\n      onClick={() => {\n        remove(contactId);\n      }}\n    >\n      {/* <div className=\"contact-list__x-left\"></div>\n      <div className=\"contact-list__x-right\"></div> */}\n    </button>\n  </li>\n);\n\nexport default ContactList;\n\nContactList.propTypes = {\n  filter: PropTypes.string,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n  remove: PropTypes.func,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { CSSTransition } from \"react-transition-group\";\n\nconst Alert = ({ isShown, info }) => (\n  <CSSTransition\n    timeout={250}\n    classNames=\"alert\"\n    in={isShown}\n    style={{ display: isShown ? \"block\" : \"none\" }}\n  >\n    <div className=\"alert\">{info}</div>\n  </CSSTransition>\n);\n\nexport default Alert;\n\nAlert.propTypes = {\n  isShown: PropTypes.bool,\n  info: PropTypes.string,\n};\n","import React from \"react\";\n\nexport default function Loader() {\n  return <div>Loading contacts...</div>;\n}\n","const getIsMounted = (state) => state.isMounted;\nconst getContacts = (state) => state.contacts;\nconst getFilter = (state) => state.filter;\nconst getAlertShown = (state) => state.isAlertShown;\nconst getAlertMessage = (state) => state.alertMessage;\nconst getLoader = (state) => state.isLoading;\n\nexport default {\n  getIsMounted,\n  getContacts,\n  getFilter,\n  getAlertShown,\n  getAlertMessage,\n  getLoader,\n};\n","import { createAction } from \"@reduxjs/toolkit\";\n\nconst fetchContactsRequest = createAction(\"fetchContacts/request\");\nconst fetchContactsSuccess = createAction(\"fetchContacts/success\");\nconst fetchContactsError = createAction(\"fetchContacts/error\");\n\nconst addContactRequest = createAction(\"addContact/request\");\nconst addContactSuccess = createAction(\"addContact/success\");\nconst addContactError = createAction(\"addContact/error\");\n\nconst removeContactRequest = createAction(\"removeContact/request\");\nconst removeContactSuccess = createAction(\"removeContact/success\");\nconst removeContactError = createAction(\"removeContact/error\");\n\nconst filter = createAction(\"FILTER\", (value) => {\n  return {\n    payload: {\n      value,\n    },\n  };\n});\n\nconst toggleMounted = createAction(\"TOGGLE_MOUNTED\", (value) => {\n  return {\n    payload: {\n      value,\n    },\n  };\n});\nconst toggleAlertVisibility = createAction(\n  \"TOGGLE_ALERT_VISIBILITY\",\n  (value) => {\n    return {\n      payload: {\n        value,\n      },\n    };\n  }\n);\n\nconst toggleAlertMessage = createAction(\"TOGGLE_ALERT_MESSAGE\", (value) => {\n  return {\n    payload: {\n      value,\n    },\n  };\n});\n\nexport default {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n\n  removeContactRequest,\n  removeContactSuccess,\n  removeContactError,\n\n  filter,\n  toggleMounted,\n  toggleAlertVisibility,\n  toggleAlertMessage,\n};\n","import actions from \"./actions\";\nimport axios from \"axios\";\n\nconst fetchContacts = () => (dispatch) => {\n  dispatch(actions.fetchContactsRequest());\n\n  axios\n    .get(\"http://localhost:2001/contacts\")\n    .then((response) => {\n      dispatch(actions.fetchContactsSuccess(response.data));\n    })\n    .catch((error) => dispatch(actions.fetchContactsError(error)));\n};\n\nconst addContact = (contact) => (dispatch) => {\n  dispatch(actions.addContactRequest());\n\n  axios\n    .post(\"http://localhost:2001/contacts\", contact)\n    .then((response) => dispatch(actions.addContactSuccess(response.data)))\n    .catch((error) => dispatch(actions.addContactError(error)));\n};\n\nconst removeContact = (id) => (dispatch) => {\n  dispatch(actions.removeContactRequest());\n\n  axios\n    .delete(`http://localhost:2001/contacts/${id}`)\n    .then((response) => dispatch(actions.removeContactSuccess(id)))\n    .catch((error) => dispatch(actions.removeContactError(error)));\n};\n\nexport default {\n  fetchContacts,\n  addContact,\n  removeContact,\n};\n","import React from \"react\";\nimport Filter from \"./components/Filter\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Alert from \"./components/Alert\";\nimport Loader from \"./components/Loading\";\nimport selectors from \"./contacts-selectors\";\nimport \"./app.scss\";\n\nimport operations from \"./reduxOperations\";\n\nimport { connect } from \"react-redux\";\nimport actions from \"./actions\";\n\nimport { CSSTransition } from \"react-transition-group\";\n\nclass App extends React.Component {\n  handleSubmit = ({ name, number }) => {\n    if (name.trim() === \"\" || number.trim() === \"\") {\n      this.handleAlert(\"Name and number must be provided.\");\n      return;\n    }\n    const check = this.props.contacts.find((contact) => contact.name === name);\n    check\n      ? this.handleAlert(\"You already have \" + name)\n      : this.props.onFormSubmit(name, number);\n  };\n\n  handleAlert(message) {\n    this.props.handleAlertChange(message);\n    this.props.handleAlertVisibility(true);\n    setTimeout(() => {\n      this.props.handleAlertVisibility(false);\n    }, 3000);\n  }\n\n  componentDidMount() {\n    this.props.loadContacts();\n    this.props.toggleMounted(true);\n  }\n\n  render() {\n    return (\n      <div className=\"phonebook\">\n        <CSSTransition\n          in={this.props.isMounted}\n          timeout={500}\n          classNames=\"title\"\n          mountOnEnter\n        >\n          <h2 className=\"title\">Phonebook</h2>\n        </CSSTransition>\n        <ContactForm formSubmit={this.handleSubmit} />\n        {this.props.contacts.length > 1 ? (\n          <Filter\n            filterChange={this.props.handleFilter}\n            filterVal={this.props.filter}\n          />\n        ) : null}\n\n        {this.props.isLoading && <Loader />}\n        <ContactList\n          filter={this.props.filter}\n          contacts={this.props.contacts}\n          remove={this.props.removeContact}\n        />\n        <Alert\n          isShown={this.props.isAlertShown}\n          info={this.props.alertMessage}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isMounted: selectors.getIsMounted(state),\n  contacts: selectors.getContacts(state),\n  filter: selectors.getFilter(state),\n  isAlertShown: selectors.getAlertShown(state),\n  alertMessage: selectors.getAlertMessage(state),\n  isLoading: selectors.getLoader(state),\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onFormSubmit: (name, number) =>\n      dispatch(operations.addContact({ name, number })),\n    removeContact: (id) => dispatch(operations.removeContact(id)),\n    toggleMounted: (value) => dispatch(actions.toggleMounted(value)),\n    handleFilter: (e) => dispatch(actions.filter(e.target.value)),\n    handleAlertChange: (message) =>\n      dispatch(actions.toggleAlertMessage(message)),\n    handleAlertVisibility: (value) =>\n      dispatch(actions.toggleAlertVisibility(value)),\n    loadContacts: () => dispatch(operations.fetchContacts()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport actions from \"../actions\";\n\nexport const contactReducer = createReducer([], {\n  [actions.fetchContactsSuccess]: (state, action) => action.payload,\n\n  [actions.addContactSuccess]: (state, action) => [...state, action.payload],\n\n  [actions.removeContactSuccess]: (state, action) =>\n    state.filter((el) => el.id !== action.payload),\n});\n\nexport const loading = createReducer(false, {\n  [actions.fetchContactsRequest]: () => true,\n  [actions.fetchContactsSuccess]: () => false,\n  [actions.fetchContactsError]: () => false,\n});\n","import actions from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const filterReducer = createReducer(\"\", {\n  [actions.filter]: (state, action) => action.payload.value,\n});\n","import actions from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const mountedReducer = createReducer(false, {\n  [actions.toggleMounted]: (state, action) => action.payload.value,\n});\n","import actions from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const alertShownReducer = createReducer(false, {\n  [actions.toggleAlertVisibility]: (state, action) => action.payload.value,\n});\n","import actions from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const alertMessageReducer = createReducer(\"\", {\n  [actions.toggleAlertMessage]: (state, action) => action.payload.value,\n});\n","import { combineReducers } from \"redux\";\n\nimport { contactReducer, loading } from \"./contactReducer\";\nimport { filterReducer } from \"./filterReducer\";\nimport { mountedReducer } from \"./mountedReducer\";\nimport { alertShownReducer } from \"./alertShownReducer\";\nimport { alertMessageReducer } from \"./alertMessageReducer\";\n\nconst rootReducer = combineReducers({\n  contacts: contactReducer,\n  filter: filterReducer,\n  isMounted: mountedReducer,\n  isAlertShown: alertShownReducer,\n  alertMessage: alertMessageReducer,\n  isLoading: loading,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"./reducers\";\nimport { Provider } from \"react-redux\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}