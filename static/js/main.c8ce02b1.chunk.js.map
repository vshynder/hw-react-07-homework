{"version":3,"sources":["components/Filter.js","components/ContactForm.js","components/ContactList.js","components/Alert.js","components/Loading.js","actions.js","reduxOperations.js","App.js","reducers/contactReducer.js","reducers/filterReducer.js","reducers/mountedReducer.js","reducers/alertShownReducer.js","reducers/alertMessageReducer.js","reducers/index.js","index.js"],"names":["Filter","props","className","id","onChange","filterChange","value","filterVal","ContactForm","state","name","number","handleChange","e","setState","target","handleSubmit","preventDefault","formSubmit","onSubmit","this","type","React","Component","ContactListItem","contactId","remove","onClick","ContactList","useEffect","localStorage","setItem","JSON","stringify","contacts","TransitionGroup","component","filter","map","contact","CSSTransition","key","timeout","classNames","toLowerCase","includes","Alert","isShown","info","in","style","display","Loader","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","payload","toggleMounted","toggleAlertVisibility","toggleAlertMessage","dispatch","actions","axios","get","then","response","data","catch","error","post","delete","App","trim","find","handleAlert","onFormSubmit","message","handleAlertChange","handleAlertVisibility","setTimeout","loadContacts","isMounted","mountOnEnter","length","handleFilter","isLoading","removeContact","isAlertShown","alertMessage","connect","operations","contactReducer","createReducer","action","el","loading","filterReducer","mountedReducer","alertShownReducer","alertMessageReducer","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8ce02b1.chunk.js","sourcesContent":["import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nconst Filter = (props) => {\n  return (\n    <div className=\"filter\">\n      <p className=\"filter__title\">Find contacts by name</p>\n      <input\n        className=\"filter__input\"\n        id=\"filter\"\n        onChange={props.filterChange}\n        value={props.filterVal}\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filterChange: PropTypes.func,\n  filterVal: PropTypes.string,\n};\n\nexport default Filter;\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nclass ContactForm extends React.Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.formSubmit(this.state);\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"form__name\">\n          Name\n          <input\n            className=\"form__name--input\"\n            id=\"name\"\n            onChange={this.handleChange}\n            type=\"text\"\n            value={this.state.name}\n          />\n        </label>\n        <label className=\"form__number\">\n          Number\n          <input\n            className=\"form__number--input\"\n            id=\"number\"\n            onChange={this.handleChange}\n            type=\"text\"\n            value={this.state.number}\n          />\n        </label>\n        <button className=\"form__submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  formSubmit: PropTypes.func,\n};\n","import React, { useEffect } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport PropTypes from \"prop-types\";\n\nconst LS_KEY = \"react-hw-3\";\n\nconst ContactList = (props) => {\n  useEffect(() => {\n    localStorage.setItem(LS_KEY, JSON.stringify(props.contacts));\n  }, [props.contacts]);\n\n  return (\n    <TransitionGroup component=\"ul\" className=\"contact-list\">\n      {props.filter === \"\"\n        ? props.contacts.map((contact) => (\n            <CSSTransition\n              key={contact.id}\n              timeout={250}\n              classNames=\"contact-list__item\"\n            >\n              <ContactListItem\n                contactId={contact.id}\n                name={contact.name}\n                number={contact.number}\n                remove={props.remove}\n              />\n            </CSSTransition>\n          ))\n        : props.contacts\n            .filter((contact) =>\n              contact.name.toLowerCase().includes(props.filter.toLowerCase())\n            )\n            .map((contact) => (\n              <CSSTransition\n                key={contact.id}\n                timeout={250}\n                classNames=\"contact-list__item\"\n              >\n                <ContactListItem\n                  key={contact.id}\n                  contactId={contact.id}\n                  name={contact.name}\n                  number={contact.number}\n                  remove={props.remove}\n                />\n              </CSSTransition>\n            ))}\n    </TransitionGroup>\n  );\n};\n\nconst ContactListItem = ({ contactId, name, number, remove }) => (\n  <li className=\"contact-list__item\">\n    <div className=\"contact-list__item--cont\">\n      <span className=\"contact-list__item--span\">{name}</span>\n      <span className=\"contact-list__item--span\">{number}</span>\n    </div>\n\n    <button\n      className=\"contact-list__remove\"\n      onClick={() => {\n        remove(contactId);\n      }}\n    >\n      {/* <div className=\"contact-list__x-left\"></div>\n      <div className=\"contact-list__x-right\"></div> */}\n    </button>\n  </li>\n);\n\nexport default ContactList;\n\nContactList.propTypes = {\n  filter: PropTypes.string,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n  remove: PropTypes.func,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { CSSTransition } from \"react-transition-group\";\n\nconst Alert = ({ isShown, info }) => (\n  <CSSTransition\n    timeout={250}\n    classNames=\"alert\"\n    in={isShown}\n    style={{ display: isShown ? \"block\" : \"none\" }}\n  >\n    <div className=\"alert\">{info}</div>\n  </CSSTransition>\n);\n\nexport default Alert;\n\nAlert.propTypes = {\n  isShown: PropTypes.bool,\n  info: PropTypes.string,\n};\n","import React from \"react\";\n\nexport default function Loader() {\n  return <div>Loading contacts...</div>;\n}\n","import { createAction } from \"@reduxjs/toolkit\";\n\nconst fetchContactsRequest = createAction(\"fetchContacts/request\");\nconst fetchContactsSuccess = createAction(\"fetchContacts/success\");\nconst fetchContactsError = createAction(\"fetchContacts/error\");\n\nconst addContactRequest = createAction(\"addContact/request\");\nconst addContactSuccess = createAction(\"addContact/success\");\nconst addContactError = createAction(\"addContact/error\");\n\nconst removeContactRequest = createAction(\"removeContact/request\");\nconst removeContactSuccess = createAction(\"removeContact/success\");\nconst removeContactError = createAction(\"removeContact/error\");\n\nconst filter = createAction(\"FILTER\", (value) => {\n  return {\n    payload: {\n      value,\n    },\n  };\n});\n\nconst toggleMounted = createAction(\"TOGGLE_MOUNTED\", (value) => {\n  return {\n    payload: {\n      value,\n    },\n  };\n});\nconst toggleAlertVisibility = createAction(\n  \"TOGGLE_ALERT_VISIBILITY\",\n  (value) => {\n    return {\n      payload: {\n        value,\n      },\n    };\n  }\n);\n\nconst toggleAlertMessage = createAction(\"TOGGLE_ALERT_MESSAGE\", (value) => {\n  return {\n    payload: {\n      value,\n    },\n  };\n});\n\nexport default {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n\n  removeContactRequest,\n  removeContactSuccess,\n  removeContactError,\n\n  filter,\n  toggleMounted,\n  toggleAlertVisibility,\n  toggleAlertMessage,\n};\n","import actions from \"./actions\";\nimport axios from \"axios\";\n\nconst fetchContacts = () => (dispatch) => {\n  dispatch(actions.fetchContactsRequest());\n\n  axios\n    .get(\"http://localhost:2001/contacts\")\n    .then((response) => {\n      dispatch(actions.fetchContactsSuccess(response.data));\n    })\n    .catch((error) => dispatch(actions.fetchContactsError(error)));\n};\n\nconst addContact = (contact) => (dispatch) => {\n  dispatch(actions.addContactRequest());\n\n  axios\n    .post(\"http://localhost:2001/contacts\", contact)\n    .then((response) => dispatch(actions.addContactSuccess(response.data)))\n    .catch((error) => dispatch(actions.addContactError(error)));\n};\n\nconst removeContact = (id) => (dispatch) => {\n  dispatch(actions.removeContactRequest());\n\n  axios\n    .delete(`http://localhost:2001/contacts/${id}`)\n    .then((response) => dispatch(actions.removeContactSuccess(id)))\n    .catch((error) => dispatch(actions.removeContactError(error)));\n};\n\nexport default {\n  fetchContacts,\n  addContact,\n  removeContact,\n};\n","import React from \"react\";\nimport Filter from \"./components/Filter\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Alert from \"./components/Alert\";\nimport Loader from \"./components/Loading\";\nimport \"./app.scss\";\n\nimport operations from \"./reduxOperations\";\n\nimport { connect } from \"react-redux\";\nimport actions from \"./actions\";\n\nimport { CSSTransition } from \"react-transition-group\";\n\nclass App extends React.Component {\n  handleSubmit = ({ name, number }) => {\n    if (name.trim() === \"\" || number.trim() === \"\") {\n      this.handleAlert(\"Name and number must be provided.\");\n      return;\n    }\n    const check = this.props.contacts.find((contact) => contact.name === name);\n    check\n      ? this.handleAlert(\"You already have \" + name)\n      : this.props.onFormSubmit(name, number);\n  };\n\n  handleAlert(message) {\n    this.props.handleAlertChange(message);\n    this.props.handleAlertVisibility(true);\n    setTimeout(() => {\n      this.props.handleAlertVisibility(false);\n    }, 3000);\n  }\n\n  componentDidMount() {\n    this.props.loadContacts();\n    this.props.toggleMounted(true);\n  }\n\n  render() {\n    return (\n      <div className=\"phonebook\">\n        <CSSTransition\n          in={this.props.isMounted}\n          timeout={500}\n          classNames=\"title\"\n          mountOnEnter\n        >\n          <h2 className=\"title\">Phonebook</h2>\n        </CSSTransition>\n        <ContactForm formSubmit={this.handleSubmit} />\n        {this.props.contacts.length > 1 ? (\n          <Filter\n            filterChange={this.props.handleFilter}\n            filterVal={this.props.filter}\n          />\n        ) : null}\n\n        {this.props.isLoading && <Loader />}\n        <ContactList\n          filter={this.props.filter}\n          contacts={this.props.contacts}\n          remove={this.props.removeContact}\n        />\n        <Alert\n          isShown={this.props.isAlertShown}\n          info={this.props.alertMessage}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isMounted: state.isMounted,\n  contacts: state.contacts,\n  filter: state.filter,\n  isAlertShown: state.isAlertShown,\n  alertMessage: state.alertMessage,\n  isLoading: state.isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onFormSubmit: (name, number) =>\n      dispatch(operations.addContact({ name, number })),\n    removeContact: (id) => dispatch(operations.removeContact(id)),\n    toggleMounted: (value) => dispatch(actions.toggleMounted(value)),\n    handleFilter: (e) => dispatch(actions.filter(e.target.value)),\n    handleAlertChange: (message) =>\n      dispatch(actions.toggleAlertMessage(message)),\n    handleAlertVisibility: (value) =>\n      dispatch(actions.toggleAlertVisibility(value)),\n    loadContacts: () => dispatch(operations.fetchContacts()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport actions from \"../actions\";\n\nexport const contactReducer = createReducer([], {\n  [actions.fetchContactsSuccess]: (state, action) => action.payload,\n\n  [actions.addContactSuccess]: (state, action) => [...state, action.payload],\n\n  [actions.removeContactSuccess]: (state, action) =>\n    state.filter((el) => el.id !== action.payload),\n});\n\nexport const loading = createReducer(false, {\n  [actions.fetchContactsRequest]: () => true,\n  [actions.fetchContactsSuccess]: () => false,\n  [actions.fetchContactsError]: () => false,\n});\n","import actions from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const filterReducer = createReducer(\"\", {\n  [actions.filter]: (state, action) => action.payload.value,\n});\n","import actions from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const mountedReducer = createReducer(false, {\n  [actions.toggleMounted]: (state, action) => action.payload.value,\n});\n","import actions from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const alertShownReducer = createReducer(false, {\n  [actions.toggleAlertVisibility]: (state, action) => action.payload.value,\n});\n","import actions from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const alertMessageReducer = createReducer(\"\", {\n  [actions.toggleAlertMessage]: (state, action) => action.payload.value,\n});\n","import { combineReducers } from \"redux\";\n\nimport { contactReducer, loading } from \"./contactReducer\";\nimport { filterReducer } from \"./filterReducer\";\nimport { mountedReducer } from \"./mountedReducer\";\nimport { alertShownReducer } from \"./alertShownReducer\";\nimport { alertMessageReducer } from \"./alertMessageReducer\";\n\nconst rootReducer = combineReducers({\n  contacts: contactReducer,\n  filter: filterReducer,\n  isMounted: mountedReducer,\n  isAlertShown: alertShownReducer,\n  alertMessage: alertMessageReducer,\n  isLoading: loading,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"./reducers\";\nimport { Provider } from \"react-redux\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}